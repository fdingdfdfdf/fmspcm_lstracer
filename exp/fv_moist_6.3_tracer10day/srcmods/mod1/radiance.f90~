module radiance_mod

! ==================================================================================
! ==================================================================================

   use fms_mod,               only: open_file, check_nml_error, &
                                    mpp_pe, close_file, &
                                    error_mesg, FATAL

   use constants_mod,         only: stefan, cp_air, grav, pstd_mks, &
                                B_nu, &
                                c, c2, atm, Rstar, Tref
   use dimensions,            only : nGas, nAng, nS, nlinesMAX, &
                                nTem, datadir
   use line_profs,            only : lorentz, doppler, voigt


   use    diag_manager_mod,   only: register_diag_field, send_data

   use    time_manager_mod,   only: time_type, &
                                    operator(+), operator(-), operator(/=)
   use      topography_mod,   only: get_ocean_mask
!   use      transforms_mod,   only: get_grid_boundaries
   use fv_pack, only : master
 
!==================================================================================
implicit none
private
!==================================================================================

! version information 
 
character(len=128) :: version='$Id: radiance.f90 $'
character(len=128) :: tag='homemade'

!==================================================================================

! public interfaces

public :: radiance_init !, radiance_down , radiance_up, radiance_end
!==================================================================================


! module variables
  logical :: initialized =.false.
  integer  :: nlines_beguier = 7786 ! number of lines in Beguier+ JQRST (2015) CH4 data
  logical  :: use_beguier_2015 = .true. ! include Beguier+ JQRST (2015) CH4 data in near-IR?

  integer :: iGas_H2O = 1
  integer :: iGas_CO2 = 2
  integer :: iGas_O3  = 3
  integer :: iGas_CH4 = 6

    !------- inputs --------
  logical :: HITEMP = .False.                  ! use HITEMP line lists?
!  real :: deltanu_trunc = 25.0d0      ! truncation wavenumber [cm^-1]
  real :: dTlay = 30.0
  real :: nu_lw1 = 1.0
  real :: nu_lw2 = 3000.0
  logical, parameter :: gray_debug   = .false. ! uniform opacity vs. wavenumber

    ! constants once loaded
  integer, dimension(nGas) :: nlines, deltanu_trunc            ! actual number of lines
  real, dimension(nGas)    :: mu_i 
  integer, dimension(nGas, nlinesMAX) ::  mol,  iso    ! molecule number
  real, dimension(nGas, nlinesMAX) ::  nu0, Sref, einstein, gam_air, gam_self,&
          Egnd, ncoeff, delta , &
          gam_lore, gam_dopp, Strue

!  integer iLay, iLev, iAng, iS                    ! do loop variables
!  integer iRev, iGas, ierr

  real, dimension(nS) :: cosa, ang_wt, nu_lw, nu_sw, sigma_lw, &
          sigma_CIA  
  real :: dnu_lw

  real, allocatable, dimension(:,:,:,:) :: f_i
  real, allocatable, dimension(:,:,:,:,:,:) :: sigma_lw_ar 
  real, allocatable, dimension(:,:,:,:,:) :: sigma_total_dry, &
          sigma_total, dtau_lw, log_dtau_lw 
  real, allocatable, dimension(:,:,:,:) :: dtau_lw_a, dTran, &
          Bnu_lay
  real, allocatable, dimension(:,:,:,:) :: tau_lw, Bnu_lev, &
          I_lev_up, I_lev_dn

real, allocatable, dimension(:,:,:) :: OLRnu, OLRnu_temp, OSRnu, OSRnu_temp, GSRnu, GSRnu_temp, Bnu_s, tau_lw_i
real, allocatable, dimension(:,:) :: OLR_temp, OSR_temp, GSR_temp, OLR, OSR, GSR
real, allocatable, dimension(:,:,:) :: Ilev_up_lw, Ilev_dn_lw, Flev_up_lw, Flev_dn_lw, &
       Ilev_up_sw, Ilev_dn_sw, Flev_up_sw, Flev_dn_sw 
real, allocatable, dimension(:,:,:) :: dF_lw, dF_sw, dTdt_lw, dTdt_sw,&
       Tcold 

real, save :: pi, deg_to_rad , rad_to_deg


!namelist/radiance_nml/ os08, constant_albedo, solar_constant, del_sol, 
!==================================================================================
!-------------------- diagnostics fields -------------------------------

integer :: id_OLRnu 
logical :: used
character(len=10), parameter :: mod_name = 'lbl'

real :: missing_value = -999.

contains
! ==================================================================================
! ==================================================================================

subroutine radiance_init(is, ie, js, je, num_levels, axes, Time, lat, qlay, play,Tlay,psurf)
!-------------------------------------------------------------------------------------
integer, intent(in), dimension(4) :: axes
type(time_type), intent(in)       :: Time
integer, intent(in)               :: is, ie, js, je, num_levels
real, intent(in) , dimension(:,:)   :: lat, psurf
real, intent(in),  dimension(:,:,:) :: qlay, play, Tlay

!-------------------------------------------------------------------------------------
integer, dimension(3) :: half = (/1,2,4/)
integer :: ierr, io, unit, i
logical :: water_file_exists
!-----------------------------------------------------------------------------------------
! read namelist and copy to logfile

!unit = open_file ('input.nml', action='read')
!ierr=1
!do while (ierr /= 0)
!   read  (unit, nml=radiance_nml, iostat=io, end=10)
!   ierr = check_nml_error (io, 'radiance_nml')
!enddo
!10 call close_file (unit)

!unit = open_file ('logfile.out', action='append')
!if ( mpp_pe() == 0 ) then
!  write (unit,'(/,80("="),/(a))') trim(version), trim(tag)
!  write (unit, nml=radiance_nml)
!endif
!call close_file (unit)

pi    = 4.0*atan(1.)
deg_to_rad = 2.*pi/360.
rad_to_deg = 360.0/2./pi

initialized = .true.
deltanu_trunc(:) = 25.0d0 

allocate (sigma_lw_ar   (ie-is+1, je-js+1, num_levels, nS, nGas, nTem))
allocate (sigma_total_dry   (ie-is+1, je-js+1, num_levels, nS, nTem))
allocate (sigma_total   (ie-is+1, je-js+1, num_levels, nS, nTem))
allocate (dtau_lw       (ie-is+1, je-js+1, num_levels, nS, nTem))
allocate (log_dtau_lw   (ie-is+1, je-js+1, num_levels, nS, nTem))
allocate (dtau_lw_a     (ie-is+1, je-js+1, num_levels, nS))
allocate (dTran         (ie-is+1, je-js+1, num_levels, nS))
allocate (Bnu_lay       (ie-is+1, je-js+1, num_levels, nS))

allocate (tau_lw        (ie-is+1, je-js+1, num_levels+1, nS))
allocate (Bnu_lev       (ie-is+1, je-js+1, num_levels+1, nS))
allocate (I_lev_up      (ie-is+1, je-js+1, num_levels+1, nS))
allocate (I_lev_dn      (ie-is+1, je-js+1, num_levels+1, nS))

allocate (OLRnu         (ie-is+1, je-js+1, nS))
allocate (OLRnu_temp    (ie-is+1, je-js+1, nS))
allocate (OSRnu         (ie-is+1, je-js+1, nS))
allocate (OSRnu_temp    (ie-is+1, je-js+1, nS))
allocate (GSRnu         (ie-is+1, je-js+1, nS))
allocate (GSRnu_temp    (ie-is+1, je-js+1, nS))
allocate (Bnu_s         (ie-is+1, je-js+1, nS))
allocate (tau_lw_i      (ie-is+1, je-js+1, nS))

allocate (OLR         (ie-is+1, je-js+1))
allocate (OLR_temp    (ie-is+1, je-js+1))
allocate (OSR         (ie-is+1, je-js+1))
allocate (OSR_temp    (ie-is+1, je-js+1))
allocate (GSR         (ie-is+1, je-js+1))
allocate (GSR_temp    (ie-is+1, je-js+1))

allocate (Ilev_up_lw    (ie-is+1, je-js+1, num_levels+1))
allocate (Ilev_dn_lw    (ie-is+1, je-js+1, num_levels+1))
allocate (Flev_up_lw    (ie-is+1, je-js+1, num_levels+1))
allocate (Flev_dn_lw    (ie-is+1, je-js+1, num_levels+1))
allocate (Ilev_up_sw    (ie-is+1, je-js+1, num_levels+1))
allocate (Ilev_dn_sw    (ie-is+1, je-js+1, num_levels+1))
allocate (Flev_up_sw    (ie-is+1, je-js+1, num_levels+1))
allocate (Flev_dn_sw    (ie-is+1, je-js+1, num_levels+1))

allocate (dF_lw    (ie-is+1, je-js+1, num_levels))
allocate (dF_sw    (ie-is+1, je-js+1, num_levels))
allocate (dTdt_lw  (ie-is+1, je-js+1, num_levels))
allocate (dTdt_sw  (ie-is+1, je-js+1, num_levels))
allocate (Tcold    (ie-is+1, je-js+1, num_levels))

allocate (f_i      (ie-is+1, je-js+1, num_levels, nGas))
f_i(:,:,:,1) = qlay  !should be molar concentration, q is mass concentration now
f_i(:,:,:,2) = 4e-6
mu_i(1) = 18.01528     ! molar mass of H2O [g/mol]
mu_i(2) = 44.0095      ! molar mass of CO2 [g/mol]
!-----------------------------------------------------------------------
    !-------- read line data --------
    ! line data is only read if calc_sigma(iGas) = .true.
    call read_line_data()

    !-------- set up radiative transfer calculations --------
!    call setup_shortwave(Tlay,dTlay,play,ps,f_i,mu_i,grav,calc_sigma,nu_sw)

    if (master) write(6,*) play(:,:,1), Tlay(:,:,1)
    call setup_longwave(Tlay,dTlay,play,f_i,mu_i,nu_lw)
!    call define_cosa_quad(cosa,ang_wt)

    !-------- define lower Tlay for sigma interpolation --------
!    Tcold = Tlay - dTlay


!    if (master) write(6,*) nu0

!------------ initialize diagnostic fields ---------------

id_OLRnu = register_diag_field(mod_name, 'OLRnu',        &
     axes((/1,2,5/)), Time, 'radiance spectrum','W/m**2/cm-1') 

OLRnu(:,:,:) =  sigma_total_dry(:,:,num_levels,:,1) 
if (id_OLRnu>0) used = send_data(id_OLRnu, OLRnu, Time) 
return
end subroutine radiance_init


! ==================================================================================

subroutine radiance_down (is, js, Time_diag, lat, lon, p_half, q, t,         &
                           net_surf_sw_down, surf_lw_down)

! Begin the radiance calculation by computing downward fluxes.
! This part of the calculation does not depend on the surface temperature.

integer, intent(in)                 :: is, js
type(time_type), intent(in)         :: Time_diag
real, intent(in) , dimension(:,:)   :: lat, lon
real, intent(out) , dimension(:,:)   :: net_surf_sw_down
real, intent(out) , dimension(:,:)   :: surf_lw_down
real, intent(in) , dimension(:,:,:) :: t, p_half, q


integer :: i, j, k, n




n = size(t,3)
net_surf_sw_down = 0.
surf_lw_down = 0.

!ss  = sin(lat(1,:))
!p2 = (1. - 3.*ss*ss)/4.
!cos_lat  = cos(lat(1,:))
!   do i = 1, size(t,1)
!      solar(i,:) = 0.25*solar_constant*(1.0 + del_sol*p2 + del_sw * ss)
!      solar(i,:) = solar_constant*cos_lat/pi
!   enddo
!endif

!------- downward lw flux surface -------
!      if ( id_lwdn_sfc > 0 ) then
!          used = send_data ( id_lwdn_sfc, surf_lw_down, Time_diag)
!      endif

return
end subroutine radiance_down

! ==================================================================================

                                                                      
subroutine radiance_end
                                                                                                      
!deallocate (b, tdt_rad, tdt_sw, entrop_rad) 


end subroutine radiance_end

! ==================================================================================


 subroutine read_line_data()

    ! read all line data
    integer :: kk, il, ierr, iGas

    integer :: mol_temp, iso_temp      ! molecule number
    real ::  nu0_temp, Sref_temp, einstein_temp,gamair_temp, gamself_temp,Egnd_temp,ncoeff_temp,  delta_temp

    ! read lines
    if (master) write(6,*) "creating line data..."

    molec_loop : do iGas = 1, nGas
!    if(calc_sigma(iGas))then
       if(iGas==iGas_H2O)then
          if(HITEMP)then
             open(unit=111,file=trim(datadir)//'01_HITEMP2010_red2.par')
          else
             open(unit=111,file=trim(datadir)//'02_hit12.par')
          endif
       elseif(iGas==iGas_CO2)then
          if(HITEMP)then
             open(unit=111,file=trim(datadir)//'02_HITEMP2010_red2.par')
          else
             open(unit=111,file=trim(datadir)//'02_hit12.par')
          endif
!       elseif(iGas==iGas_O3)then
!          open(unit=111,file=trim(datadir)//'03_hit12.par')
!       elseif(iGas==iGas_CH4)then
!          open(unit=111,file=trim(datadir)//'06_hit12.par')
!       elseif(iGas==iGas_SO2)then
!          open(unit=111,file=trim(datadir)//'09_hit12.par')
!       elseif(iGas==iGas_H2S)then
!          open(unit=111,file=trim(datadir)//'31_hit12.par')
       else
          write(6,*) 'Note: spectral dataset not found for iGas = ',iGas,' .'
       end if

       il = 1
       read_loop : do 
          if(HITEMP)then
             read(111,'(i2, i1, f12.6, 2e10.3, 2f5.4, f10.4, f4.2)',iostat=kk) mol_temp, iso_temp, &
                  nu0_temp, Sref_temp, einstein_temp, gamair_temp, gamself_temp, Egnd_temp, ncoeff_temp!, delta_temp
          else
             read(111,'(i2, i1, f12.6, 2e10.3, 2f5.4, f10.4, f4.2, f8.2)',iostat=kk) mol_temp, iso_temp, &
                  nu0_temp, Sref_temp, einstein_temp, gamair_temp, gamself_temp, Egnd_temp, ncoeff_temp, delta_temp
          endif

          if(Sref_temp>1.0d-25)then ! don't allow weak lines
          !if(Sref_temp>1.0d-25)then ! don't allow weak lines
          !if(Sref_temp>1.0d-30)then ! don't allow weak lines
          !if(Sref_temp>1.0d-35)then ! don't allow weak lines
             mol(iGas,il)      = mol_temp
             iso(iGas,il)      = iso_temp
             nu0(iGas,il)      = nu0_temp
             Sref(iGas,il)     = Sref_temp
             einstein(iGas,il) = einstein_temp
             gam_air(iGas,il)  = gamair_temp
             gam_self(iGas,il) = gamself_temp
             Egnd(iGas,il)     = Egnd_temp
             ncoeff(iGas,il)   = ncoeff_temp
             delta(iGas,il)    = delta_temp
             il = il + 1
          endif

          
          if(kk == -1)then
             exit read_loop
          endif
          if(il>nlinesMAX)then
             exit read_loop
          endif

       end do read_loop
       close(111)
       
       nlines(iGas) = il - 1

       ! special extra to add unassigned near-IR methane lines from
       ! Beguier+, JQRST (2015)
!       if(use_beguier_2015 .and. iGas==iGas_CH4)then
!          write(*,*) 'Adding Beguier+ (2015) unassigned CH4 lines in near-IR...'
!          open(unit=112,file=trim(datadir)//'beguier_2015.par')
!          do il=nlines(iGas)+1,nlines(iGas)+nlines_beguier
!             read(112,*) nu0_temp, Sref_temp
!             mol(iGas,il)      = 6
!             iso(iGas,il)      = 1
!             nu0(iGas,il)      = nu0_temp
!             Sref(iGas,il)     = Sref_temp
!             einstein(iGas,il) = -1.0e10
!             gam_air(iGas,il)  = 1.8d-2 ! from Beguier+ (2015) Section 3.1.
!             gam_self(iGas,il) = 0.0d0
!             Egnd(iGas,il)     = 1.0d0
!             ncoeff(iGas,il)   = 0.0d0 ! TO BE DETERMINED
!             delta(iGas,il)    = 0.0d0
!          end do
!          close(112)

!          nlines(iGas) = il - 1
!       end if


!    end if
    end do molec_loop

  end subroutine read_line_data

  ! ==================================================================================

  subroutine line_strength_width(mu_i,p,p_i,T,iGas)

    ! calculate line strengths, widths and frequency pressure shifts
    ! for a given species at a given temperature

    real, intent(in) :: T    ! temperature [K]
    real, intent(in) :: p    ! total pressure [Pa]
    real, intent(in) :: p_i  ! partial pressure [Pa]
    real, intent(in) :: mu_i ! molar mass [g/mol]
    integer, intent(in) :: iGas

    real :: Tfact, Tfact1       ! temperature-dependent factors []
    real :: QrefQ               ! total internal partition sum
    !real(8) gi                  ! state independent degeneracy factor
    
    integer :: il

    logical, parameter :: do_air_shift = .false. ! calculate pressure-shifted line center
    logical, parameter :: verbose      = .true. ! print more info for diagnostic

    if(T<20.0d0)then
       call error_mesg('radiance:','In line_strength_width T = exiting',FATAL)
    end if

!    if(iGas==iGas_H2 .or. iGas==iGas_N2)then ! todo: generalize this
!       if(verbose) write(*,*) 'Treating ', gas_name(iGas), ' as vib-rot inactive.'
!    else

!       if(verbose) write(*,*) "calculating line strengths for ",gas_name(iGas),"..."

       
       read_loop : do il = 1, nlines(iGas)
          
          ! calculate (air) pressure-shifted nu
!          if(do_air_shift)then
             !nu_shift(iGas,il) = nu0(iGas,il) + delta(il)*p_i(iGas)/atm
!          end if
          
          ! calculate Lorentz and Doppler linewidths [cm^-1]
          ! Lorentz linewidth is the Lorentz HWHM
          ! Doppler linewidth is the Doppler HWHM / sqrt(ln(2))
          gam_lore(iGas,il) = (Tref/T)**ncoeff(iGas,il) &
                               *(gam_air(iGas,il)*(p - p_i)/atm + gam_self(iGas,il)*p_i/atm)
          gam_dopp(iGas,il) = nu0(iGas,il)*sqrt(2*Rstar*T/(mu_i/1.0d3))/c
          ! note mu_i not mu_avg here because it is the mean speed of the molecule doing the
          ! absorbing that counts.
          
          ! get Total Internal Partition Sum (TIPS) ratio Qref / Q
          ! simple approach based on BD_TIPS data
          ! robust up to about 1000 K for H2O and CO2
          ! up to 500-600 K for CH4
          ! up to about 350 K for O3
          if(iGas==iGas_H2O .or. iGas==iGas_CO2 .or. iGas==iGas_O3 .or. iGas==iGas_CH4)then
             QrefQ = (Tref/T)**1.5d0
          else
             call error_mesg('radiance: ','Molecule Q(T) needs to be assessed still!',FATAL)
          end if

          
          ! get actual line intensity
          Tfact1          = (1.0d0 - exp(-c2*nu0(iGas,il)/T)) &
                              / (1.0d0 - exp(-c2*nu0(iGas,il)/Tref))
          Tfact           = exp( -c2*Egnd(iGas,il)*(1.0d0/T - 1.0d0/Tref) )
          Strue(iGas,il)  = Sref(iGas,il)*Tfact*Tfact1*QrefQ

          ! no temperature scaling for Beguier+ (2015) lines
          if(use_beguier_2015 .and. iGas.eq.iGas_CH4 .and. il>(nlines(iGas)-nlines_beguier)) Strue(iGas,il) = Sref(iGas,il)
          
       end do read_loop
       
       nlines(iGas) = il - 1

!    end if
    
  end subroutine line_strength_width

 
  ! ==================================================================================


  subroutine get_line_abs_cross_section(iGas,nu,sigma,T)
    
    ! calculate line absorption cross-section vs. nu for a given species
    ! in a given wavenumber range

    integer, intent(in)  :: iGas
    real, intent(in)  :: nu(nS)     ! wavenumber [cm^-1]
    real, intent(in)  :: T          ! temperature [K]: for CO2 chi-factor calculation
    real, intent(out) :: sigma(nS)  ! total absorption cross-section [cm2/molec]

    logical :: mask(nS)
    integer :: iS, il
    real :: f_temp, gam_temp
    
    real :: nu1  ! start wavenumber [cm^-1]
    real :: nu2  ! finish wavenumber [cm^-1]
    
    logical, parameter :: use_voigt   = .false.  ! use voigt function for line profiles
    logical, parameter :: debug       = .false. ! print additional text for diagnostic

!    if(debug) write(*,*) "calculating absorption cross sections for ",gas_name(iGas),"..."

    sigma(:) = 0.0d0

    nu1 = nu(1)
    nu2 = nu(nS)

!    if(.not.iGas==iGas_H2)then ! todo: transfer update from generate_kmatrix

       ! add the lines, one by one
       ! for now we use all isotopes (with Earth-like abundances!)
       line_loop : do il = 1, nlines(iGas)

          ! this is the very slow part
          trunc : if(nu0(iGas,il)>nu1-deltanu_trunc(iGas) .and. nu0(iGas,il)<nu2+deltanu_trunc(iGas))then

             mask = abs(nu - nu0(iGas,il)) < deltanu_trunc(iGas)

             write_sig_loop : do iS = 1, nS

                ! update sigma only when mask = T
                if(mask(iS))then

                   if(iGas==iGas_CO2)then
                      gam_temp = gam_lore(iGas,il) *chi_factor(nu(iS),nu0(iGas,il),T)
                      ! check but I believe this is correct
                   else
                      gam_temp = gam_lore(iGas,il) ! no sublorentzian lineshift
                   end if

                   if(use_voigt)then
                      call voigt(gam_temp, gam_dopp(iGas,il), nu(iS)-nu0(iGas,il), f_temp)
                   else
                      call lorentz(nu(iS)-nu0(iGas,il),gam_temp,f_temp)
                      !call doppler(nu(iS)-nu0(iGas,il),gam_dopp(iGas,il),f_temp)
                   endif

                   if(debug)then
                      call voigt(0.0d0,1.0d0,0.0d0,f_temp)
                      ! f_V(0) when Lorentz HWHM = 0: should yield f_D(0) = 1/sqrt(pi)
                      print*,f_temp
                      call voigt(1.0d0,1.0d-8,0.0d0,f_temp)
                      ! f_V(0) when Doppler HWHM -> 0: should yield f_L(0) = 1/pi
                      print*,f_temp
                      stop
                   endif
                   
                   sigma(iS) = sigma(iS) + Strue(iGas,il)*f_temp
                endif
             end do write_sig_loop
          end if trunc
       end do line_loop

!    end if
    
  end subroutine get_line_abs_cross_section

  ! ==================================================================================

  real(8) function chi_factor(nu_temp,nu_L,T)

    ! calculate sublorentzian line profile chi factor using Perrin & Hartman (1989) assumptions

    ! to be double-checked

    implicit none

    real(8), intent(in) :: T       ! temperature [K]
    real(8), intent(in) :: nu_L    ! line center wavenumber [cm^-1]
    real(8), intent(in) :: nu_temp ! wavenumber [cm^-1]

    ! parameters for the empirical scheme
    real(8), parameter, dimension(3) :: alpha = [0.0888d0,  0.0d0,     0.0232d0]
    real(8), parameter, dimension(3) :: beta  = [-0.160d0,  0.0526d0,  0.0d0]
    real(8), parameter, dimension(3) :: epsi  = [0.00410d0, 0.00152d0, 0.0d0]
    real(8), parameter, dimension(3) :: sigPH = [3.0,       30.0,      120.0] ! cm^-1

    real(8), dimension(3) :: B
    real(8) deltanu ! wavenumber separation [cm^-1]
    
    B          = alpha + beta*exp(-epsi*T)
    chi_factor = 1.0d0;

    deltanu   = abs(nu_temp - nu_L)
    if(deltanu<sigPH(1))then
       chi_factor = 1.0d0
    elseif(deltanu>sigPH(1) .and. deltanu<sigPH(2))then
       chi_factor = exp(-B(1)*(deltanu - sigPH(1)))
    elseif(deltanu>sigPH(2) .and. deltanu<sigPH(3))then
       chi_factor = exp(-B(1)*(sigPH(2) - sigPH(1))-B(2)*(deltanu - sigPH(2)))
    else
       chi_factor = exp(-B(1)*(sigPH(2) - sigPH(1)) - B(2)*(sigPH(3) - sigPH(2)) &
            - B(3)*(deltanu - sigPH(3)))
    end if

    return
  end function chi_factor

  ! ==================================================================================
  

  subroutine setup_longwave(Tlay,dTlay,play,f_i,mu_i,nu_lw_out)

    real, intent(in)  :: Tlay(:,:,:)        ! temperature in layer  [K]
    real, intent(in)  :: dTlay             ! temperature shift for hot/cold cross-sections [K]
    real, intent(in)  :: play(:,:,:)        ! pressure layers [Pa]
    real, intent(in)  :: f_i(:,:,:,:)    ! species molar concentration [mol/mol]
    real, intent(in)  :: mu_i(nGas)        ! molar mass of species [g/mol]
    real, intent(out) :: nu_lw_out(nS)     ! longwave wavenumber [cm^-1]

    real :: nu_lw_check                       ! longwave wavenumber [cm^-1]
    integer :: i,j,k, iGas, iLay, iS
    !------- subroutine options --------------  
    logical, parameter   :: verbose = .true.

 !   ! read namelist 
 !   open(10,file='input.nml',status='old',form='formatted',iostat=ierr)
 !   if (ierr/=0) then
 !      print*, 'Cannot find required input.nml file, aborting.'
 !      call abort
 !   else
 !      read(10,longwave_nml)
 !      close(10)
 !   endif
    
    ! create fine spectral grid and initialize abs array
    nu_lw(1)  = nu_lw1
    dnu_lw = (nu_lw2-nu_lw1)/dble(nS-1)  ! Wavenumber interval [cm^-1]
    do iS = 2, nS
       nu_lw(iS) = nu_lw(iS-1) + dnu_lw
    end do
    nu_lw_out = nu_lw

    ! calculate absorption cross section at each level

    sigma_lw(:)                = 0.0d0
    tau_lw_i(:,:,:)            = 0.0d0
    tau_lw(:,:,:,:)            = 0.0d0 ! this moved here recently: should not cause bugs
    sigma_lw_ar(:,:,:,:,:,:)   = 0.0d0
    sigma_total_dry(:,:,:,:,:) = 0.0d0
    sigma_total(:,:,:,:,:)     = 0.0d0
    dtau_lw(:,:,:,:,:)         = +1.0d-8 ! initialize non-zero to avoid NaN when optical depth is low

    gray_debug_if : if(gray_debug)then

       ! don't calculate anything in this case

    else

       big_species_loop : do iGas = 1, nGas
          
          ! read gas absorption cross section data from file if requested
!          if(.not.calc_sigma(iGas))then

             ! no need to check the number of temperatures for each layer match
             ! this was done in setup_shortwave
             
!             ! check the spectral arrays match
!             open(unit=2,file='saved_sigma_data/nu_lw.dat')
!             do iS = 1, nS
!                read(2,*) nu_lw_check
!                if(abs(nu_lw_check-nu_lw(iS))>1.0d-8)then
!                   write(*,*) 'Error: nu_lw data in saved_sigma_data does not match!'
!                   print*,nu_lw_check,' vs. ',nu_lw(iS)
!                   stop
!                end if
!             end do
!             close(2)

             ! no need to check the pressure layers match
             ! this was done in setup_shortwave
             
!             open(unit=3,file='saved_sigma_data/sigma_'//gas_name(iGas)//'_lw.dat')
!             do iS = 1, nS
!                do iLay = 1, nLay
!                   do iTem = 1,nTem
!                      read(3,'(e12.4)') sigma_lw_ar(iS,iLay,iGas,iTem)
!                   end do
!                end do
!             end do
!             close(3)
             
!          else

             ! calculate cross-sections from scratch
             do i = 1, size(Tlay,1)
             do j = 1, size(Tlay,2)
             do iLay = 1, size(Tlay,3) !nLay
!                if(verbose)then
!                   print*,'For longwave at layer ',iLay,': '
!                endif
                
!                if(nTem==2)then
!                   call line_strength_width(mu_i(iGas),play(iLay),f_i(iLay,iGas)*play(iLay),Tlay(iLay)-dTlay,iGas)
!                   call get_line_abs_cross_section(iGas,nu_lw,sigma_lw,Tlay(iLay)+dTlay)
!                   sigma_lw_ar(:,iLay,iGas,1)    = sigma_lw
                
!                   call line_strength_width(mu_i(iGas),play(iLay),f_i(iLay,iGas)*play(iLay),Tlay(iLay)+dTlay,iGas)
!                   call get_line_abs_cross_section(iGas,nu_lw,sigma_lw,Tlay(iLay)-dTlay)
!                   sigma_lw_ar(:,iLay,iGas,nTem) = sigma_lw
!                else
                   call line_strength_width(mu_i(iGas),play(i,j,iLay),f_i(i,j,iLay,iGas)*play(i,j,iLay),Tlay(i,j,iLay),iGas)
                   call get_line_abs_cross_section(iGas,nu_lw,sigma_lw,Tlay(i,j,iLay))
                   sigma_lw_ar(i,j,iLay,:,iGas,1)    = sigma_lw ! cross-section per molecule of species
!                end if


          ! multiply the species cross-section by molar concentration to get the
          ! contribution to the total cross-section, in cm2/molecule of air.
          ! at this point we also add the CIA and compute the total 'dry' cross-section.
          ! do not add variable gas cross-section to the total yet.
          if( iGas > 1) then
!             if ((f_i(i,j,iLay,iGas)*play(i,j,iLay)>1.0d1)) then
! for CIA calculation
!                   sigma_CIA(:) = 0.0d0

!                   if(nTem==2)then
!                      call get_CIA_cross_section(iGas,nu_lw,sigma_CIA,Tlay(iLay)-dTlay,play(iLay),f_i(iLay,:))
!                      sigma_total_dry(:,iLay,1)    = sigma_total_dry(:,iLay,1)    + &
!                           sigma_lw_ar(:,iLay,iGas,1)*f_i(iLay,iGas)    + sigma_CIA                     
!                      call get_CIA_cross_section(iGas,nu_lw,sigma_CIA,Tlay(iLay)+dTlay,play(iLay),f_i(iLay,:))
!                      sigma_total_dry(:,iLay,nTem) = sigma_total_dry(:,iLay,nTem) + &
!                           sigma_lw_ar(:,iLay,iGas,nTem)*f_i(iLay,iGas) + sigma_CIA
!                   else
!                      call get_CIA_cross_section(iGas,nu_lw,sigma_CIA,Tlay(iLay),play(iLay),f_i(iLay,:))
                      ! note that f_i is sent as a nGas array to get_CIA_cross_section even when we are inside
                      ! an iGas loop. this is because we need to know the abundance of the partner gas.
                      sigma_total_dry(i,j,iLay,:,1) = sigma_total_dry(i,j,iLay,:,1) + sigma_lw_ar(i,j,iLay,:,iGas,1)*f_i(i,j,iLay,iGas) !+ sigma_CIA
!                   end if
                
!             else
!                   sigma_total_dry(:,iLay,1) = sigma_total_dry(:,iLay,1) + sigma_lw_ar(:,iLay,iGas,1)*f_i(iLay,iGas)
!                   if(nTem==2)then
!                      sigma_total_dry(:,iLay,nTem) = sigma_total_dry(:,iLay,nTem) + sigma_lw_ar(:,iLay,iGas,nTem)*f_i(iLay,iGas)
!                   end if
!             end if
          end if
                
                   

             end do
             end do
             end do

             ! save sigma data for future use
             ! save nu_lw to allow consistency checks
!             open(unit=1,file='saved_sigma_data/sigma_'//gas_name(iGas)//'_lw.dat')
!             open(unit=2,file='saved_sigma_data/nu_lw.dat')
!             do iS = 1, nS
!                do iLay = 1, nLay
!                   do iTem = 1,nTem
!                      write(1,'(e12.4)') sigma_lw_ar(iS,iLay,iGas,iTem)
!                   end do
!                end do
!                write(2,*) nu_lw(iS)
!             end do
!             close(1)
!             close(2)

!          end if
         
       end do big_species_loop
    end if gray_debug_if

  end subroutine setup_longwave

  ! ==================================================================================



end module radiance_mod




